apiVersion: v1
items:
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2019-09-10T10:45:33Z"
    generation: 1
    labels:
      name: alertmanager
    name: alertmanager
    namespace: maya
    resourceVersion: "31910"
    selfLink: /apis/extensions/v1beta1/namespaces/maya/deployments/alertmanager
    uid: 5476e73e-69f6-4887-a217-e2a834055ea6
  spec:
    progressDeadlineSeconds: 2147483647
    replicas: 1
    revisionHistoryLimit: 2147483647
    selector:
      matchLabels:
        name: alertmanager
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: alertmanager
      spec:
        containers:
        - args:
          - -log.level=debug
          - -server.http-listen-port=80
          - -alertmanager.configs.url=http://configs.maya.svc.cluster.local:80
          - -alertmanager.web.external-url=/api/prom/alertmanager
          image: registry.mayadata.io/cortex-alertmanager:1.1.0-ee
          imagePullPolicy: Always
          name: alertmanager
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: directoronprem-registry-secret
        initContainers:
        - command:
          - sh
          - -c
          - |
            set -ex
            export MAYA=$(kubectl get ClusterRoleBinding | grep -w crb-maya-io | awk '{print $1}')
            echo $MAYA
            until [ ! -z "$MAYA" ]
            do
               echo "wating for ClusterRoleBinding";
               sleep 1;
               export MAYA=$(kubectl get ClusterRoleBinding | grep -w crb-maya-io | awk '{print $1}');
               echo $MAYA;
            done
          image: registry.mayadata.io/maya-init:1.0.0
          imagePullPolicy: IfNotPresent
          name: am-wait-for-crb
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - sh
          - -c
          - |
            set -ex
            export COUNT=0
            echo $COUNT
            until [ $COUNT -ne 0 ]
            do
               echo "wating for configs"
               sleep 2;
               export COUNT=$(kubectl get pods -l name=configs -n maya -o json  | jq -r '.items[] | select(.status.phase == "Running" and ([ .status.conditions[] | select(.type == "Ready" and .status == "True") ] | length ) >= 1 ) | .metadata.name' | grep -w configs | wc -l)
               echo $COUNT
            done
          image: registry.mayadata.io/maya-init:1.0.0
          imagePullPolicy: IfNotPresent
          name: am-wait-for-configs
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - sh
          - -c
          - |
            set -ex
            export COUNT=0
            echo $COUNT
            until [ $COUNT -ne 0 ]
            do
               echo "wating for maya-io-server"
               sleep 2;
               export COUNT=$(kubectl get pods -l app=maya-io -n maya -o json  | jq -r '.items[] | select(.status.phase == "Running" and ([ .status.conditions[] | select(.type == "Ready" and .status == "True") ] | length ) >= 1 ) | .metadata.name' | grep -w maya-io | wc -l)
               echo $COUNT
            done
          image: registry.mayadata.io/maya-init:1.0.0
          imagePullPolicy: IfNotPresent
          name: am-wait-for-maya-io
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: sa-maya-io
        serviceAccountName: sa-maya-io
        terminationGracePeriodSeconds: 30
  status:
    conditions:
    - lastTransitionTime: "2019-09-10T10:45:34Z"
      lastUpdateTime: "2019-09-10T10:45:34Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2019-09-10T10:45:33Z"
    generation: 1
    labels:
      name: alertstore
    name: alertstore
    namespace: maya
    resourceVersion: "31922"
    selfLink: /apis/extensions/v1beta1/namespaces/maya/deployments/alertstore
    uid: bf838b79-c09a-4a31-86a1-f85cdc471904
  spec:
    progressDeadlineSeconds: 2147483647
    replicas: 1
    revisionHistoryLimit: 2147483647
    selector:
      matchLabels:
        name: alertstore
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: alertstore
      spec:
        containers:
        - args:
          - -server.http-listen-port=80
          - -storage.storage-client=cassandra
          - -cassandra.addresses=cassandra.maya.svc.cluster.local
          - -cassandra.keyspace=mayaalerts
          - -cassandra.replication-factor=1
          - -log.level=debug
          - -alertstore.version=1
          image: registry.mayadata.io/alertstore:1.1.0-ee
          imagePullPolicy: Always
          name: alertstore
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: directoronprem-registry-secret
        initContainers:
        - command:
          - sh
          - -c
          - |
            set -ex
            export MAYA=$(kubectl get ClusterRoleBinding | grep -w crb-maya-io | awk '{print $1}')
            echo $MAYA
            until [ ! -z "$MAYA" ]
            do
               echo "wating for ClusterRoleBinding"
               sleep 1;
               export MAYA=$(kubectl get ClusterRoleBinding | grep -w crb-maya-io | awk '{print $1}')
               echo $MAYA
            done
          image: registry.mayadata.io/maya-init:1.0.0
          imagePullPolicy: IfNotPresent
          name: init-agent
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - sh
          - -c
          - |
            set -ex
            export COUNT=0
            echo $COUNT
            until [ $COUNT -ne 0 ]
            do
               echo "wating for cassandra"
               sleep 2;
               export COUNT=$(kubectl get pods -l app=cassandra -n maya -o json  | jq -r '.items[] | select(.status.phase == "Running" and ([ .status.conditions[] | select(.type == "Ready" and .status == "True") ] | length ) >= 1 ) | .metadata.name' | grep -w cassandra | wc -l)
               echo $COUNT
            done
          image: registry.mayadata.io/maya-init:1.0.0
          imagePullPolicy: IfNotPresent
          name: as-wait-for-cassandra
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - sh
          - -c
          - |
            set -ex
            export COUNT=0
            echo $COUNT
            until [ $COUNT -ne 0 ]
            do
               echo "wating for alertstore-tablemanager"
               sleep 2;
               export COUNT=$(kubectl get pods -l name=alertstore-tablemanager -n maya -o json  | jq -r '.items[] | select(.status.phase == "Running" and ([ .status.conditions[] | select(.type == "Ready" and .status == "True") ] | length ) >= 1 ) | .metadata.name' | grep -w alertstore-tablemanager | wc -l)
               echo $COUNT
            done
          image: registry.mayadata.io/maya-init:1.0.0
          imagePullPolicy: IfNotPresent
          name: as-wait-for-as-tablemanager
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: sa-maya-io
        serviceAccountName: sa-maya-io
        terminationGracePeriodSeconds: 30
  status:
    conditions:
    - lastTransitionTime: "2019-09-10T10:45:37Z"
      lastUpdateTime: "2019-09-10T10:45:37Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2019-09-10T10:45:33Z"
    generation: 1
    labels:
      name: alertstore-tablemanager
    name: alertstore-tablemanager
    namespace: maya
    resourceVersion: "31911"
    selfLink: /apis/extensions/v1beta1/namespaces/maya/deployments/alertstore-tablemanager
    uid: fb97824b-9b19-4324-a928-af66b12d961d
  spec:
    progressDeadlineSeconds: 2147483647
    replicas: 1
    revisionHistoryLimit: 2147483647
    selector:
      matchLabels:
        name: alertstore-tablemanager
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: alertstore-tablemanager
      spec:
        containers:
        - args:
          - -server.http-listen-port=80
          - -storage.storage-client=cassandra
          - -cassandra.addresses=cassandra.maya.svc.cluster.local
          - -cassandra.keyspace=mayaalerts
          - -cassandra.replication-factor=1
          - -log.level=debug
          - -tablemanager.version=1
          - -alertstore.version=1
          image: registry.mayadata.io/alertstore-tablemanager:1.1.0-ee
          imagePullPolicy: Always
          name: alertstore-tablemanager
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: directoronprem-registry-secret
        initContainers:
        - command:
          - sh
          - -c
          - |
            set -ex
            export MAYA=$(kubectl get ClusterRoleBinding | grep -w crb-maya-io | awk '{print $1}')
            echo $MAYA
            until [ ! -z "$MAYA" ]
            do
               echo "wating for ClusterRoleBinding"
               sleep 1;
               export MAYA=$(kubectl get ClusterRoleBinding | grep -w crb-maya-io | awk '{print $1}')
               echo $MAYA
            done
          image: registry.mayadata.io/maya-init:1.0.0
          imagePullPolicy: IfNotPresent
          name: astm-wait-for-crb
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - sh
          - -c
          - |
            set -ex
            export COUNT=0
            echo $COUNT
            until [ $COUNT -ne 0 ]
            do
               echo "wating for cassandra"
               sleep 2;
               export COUNT=$(kubectl get pods -l app=cassandra -n maya -o json  | jq -r '.items[] | select(.status.phase == "Running" and ([ .status.conditions[] | select(.type == "Ready" and .status == "True") ] | length ) >= 1 ) | .metadata.name' | grep -w cassandra | wc -l)
               echo $COUNT
            done
          image: registry.mayadata.io/maya-init:1.0.0
          imagePullPolicy: IfNotPresent
          name: astm-wait-for-cassandra
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: sa-maya-io
        serviceAccountName: sa-maya-io
        terminationGracePeriodSeconds: 30
  status:
    conditions:
    - lastTransitionTime: "2019-09-10T10:45:35Z"
      lastUpdateTime: "2019-09-10T10:45:35Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2019-09-10T10:45:34Z"
    generation: 1
    labels:
      app: cloud-agent
      name: cloud-agent
    name: cloud-agent
    namespace: maya
    resourceVersion: "32548"
    selfLink: /apis/extensions/v1beta1/namespaces/maya/deployments/cloud-agent
    uid: 4c1fbbda-c871-4a4c-b298-cb6ed6b45da0
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        app: cloud-agent
        name: cloud-agent
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cloud-agent
          name: cloud-agent
      spec:
        containers:
        - image: registry.mayadata.io/cloud-agent:1.1.0-ee
          imagePullPolicy: Always
          name: cloud-agent
          ports:
          - containerPort: 8880
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: directoronprem-registry-secret
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2019-09-10T10:47:58Z"
      lastUpdateTime: "2019-09-10T10:47:58Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2019-09-10T10:45:36Z"
      lastUpdateTime: "2019-09-10T10:47:58Z"
      message: ReplicaSet "cloud-agent-5b78cbff6b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2019-09-10T10:45:36Z"
    generation: 1
    labels:
      name: configs
    name: configs
    namespace: maya
    resourceVersion: "36006"
    selfLink: /apis/extensions/v1beta1/namespaces/maya/deployments/configs
    uid: 6c1d9a75-d29a-4e05-887b-3e26d8d4b289
  spec:
    progressDeadlineSeconds: 2147483647
    replicas: 1
    revisionHistoryLimit: 2147483647
    selector:
      matchLabels:
        name: configs
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: configs
      spec:
        containers:
        - args:
          - -server.http-listen-port=80
          - -database.uri=postgres://postgres@configs-db.maya.svc.cluster.local/configs?sslmode=disable
          - -database.migrations=/migrations
          image: registry.mayadata.io/cortex-configs:1.1.0-ee
          imagePullPolicy: Always
          name: configs
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: directoronprem-registry-secret
        initContainers:
        - command:
          - sh
          - -c
          - |
            set -ex
            export COUNT=0
            echo $COUNT
            until [ $COUNT -ne 0 ]
            do
               echo "wating for configs-db"
               sleep 2;
               export COUNT=$(kubectl get pods -l name=configs-db -n maya -o json  | jq -r '.items[] | select(.status.phase == "Running" and ([ .status.conditions[] | select(.type == "Ready" and .status == "True") ] | length ) >= 1 ) | .metadata.name' | grep -w configs-db | wc -l)
               echo $COUNT
            done
          image: registry.mayadata.io/maya-init:1.0.0
          imagePullPolicy: IfNotPresent
          name: cf-wait-for-configs-db
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: sa-maya-io
        serviceAccountName: sa-maya-io
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2019-09-10T10:45:41Z"
      lastUpdateTime: "2019-09-10T10:45:41Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2019-09-10T10:45:35Z"
    generation: 1
    labels:
      name: configs-db
    name: configs-db
    namespace: maya
    resourceVersion: "33867"
    selfLink: /apis/extensions/v1beta1/namespaces/maya/deployments/configs-db
    uid: 592abe91-067c-43e6-8a07-24eec6e3ff50
  spec:
    progressDeadlineSeconds: 2147483647
    replicas: 1
    revisionHistoryLimit: 2147483647
    selector:
      matchLabels:
        name: configs-db
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          prometheus.io.scrape: "false"
        creationTimestamp: null
        labels:
          name: configs-db
      spec:
        containers:
        - env:
          - name: POSTGRES_DB
            value: configs
          image: postgres:9.6
          imagePullPolicy: IfNotPresent
          name: configs-db
          ports:
          - containerPort: 5432
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: directoronprem-registry-secret
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2019-09-10T10:45:40Z"
      lastUpdateTime: "2019-09-10T10:45:40Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2019-09-10T10:45:37Z"
    generation: 1
    labels:
      name: consul
    name: consul
    namespace: maya
    resourceVersion: "33884"
    selfLink: /apis/extensions/v1beta1/namespaces/maya/deployments/consul
    uid: 6ee78817-2b6d-4b98-babe-9a9b295615ff
  spec:
    progressDeadlineSeconds: 2147483647
    replicas: 1
    revisionHistoryLimit: 2147483647
    selector:
      matchLabels:
        name: consul
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: consul
      spec:
        containers:
        - args:
          - agent
          - -ui
          - -server
          - -client=0.0.0.0
          - -bootstrap
          env:
          - name: CHECKPOINT_DISABLE
            value: "1"
          image: consul:0.7.1
          imagePullPolicy: IfNotPresent
          name: consul
          ports:
          - containerPort: 8300
            name: server-noscrape
            protocol: TCP
          - containerPort: 8301
            name: serf-noscrape
            protocol: TCP
          - containerPort: 8400
            name: client-noscrape
            protocol: TCP
          - containerPort: 8500
            name: http-noscrape
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: directoronprem-registry-secret
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2019-09-10T10:45:44Z"
      lastUpdateTime: "2019-09-10T10:45:44Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2019-09-10T10:45:42Z"
    generation: 1
    labels:
      k8s-app: kibana-logging
    name: kibana-logging
    namespace: maya
    resourceVersion: "36390"
    selfLink: /apis/extensions/v1beta1/namespaces/maya/deployments/kibana-logging
    uid: 3717be43-eef2-4a22-8cef-a937d29a9779
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kibana-logging
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kibana-logging
      spec:
        containers:
        - env:
          - name: SERVER_BASEPATH
            value: /kibana
          image: registry.mayadata.io/kibana:1.1.0-ee
          imagePullPolicy: Always
          name: kibana-logging
          ports:
          - containerPort: 5601
            name: ui
            protocol: TCP
          resources:
            limits:
              cpu: 30m
            requests:
              cpu: 10m
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: directoronprem-registry-secret
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    conditions:
    - lastTransitionTime: "2019-09-10T10:45:47Z"
      lastUpdateTime: "2019-09-10T10:45:47Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2019-09-10T10:45:45Z"
      lastUpdateTime: "2019-09-10T10:48:19Z"
      message: ReplicaSet "kibana-logging-555778755f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2019-09-10T10:45:44Z"
    generation: 1
    labels:
      app: maya-grafana
    name: maya-grafana
    namespace: maya
    resourceVersion: "33091"
    selfLink: /apis/extensions/v1beta1/namespaces/maya/deployments/maya-grafana
    uid: ca492db0-1c3e-4085-a0e3-cafd15bbfa16
  spec:
    progressDeadlineSeconds: 2147483647
    replicas: 1
    revisionHistoryLimit: 2147483647
    selector:
      matchLabels:
        app: maya-grafana
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: maya-grafana
      spec:
        containers:
        - env:
          - name: GF_AUTH_BASIC_ENABLED
            value: "true"
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "false"
          image: registry.mayadata.io/maya-grafana:1.1.0-ee
          imagePullPolicy: Always
          name: master-grafana
          ports:
          - containerPort: 3000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/grafana
            name: config-volume
          - mountPath: /var/lib/grafana
            name: maya-grafana-store
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: directoronprem-registry-secret
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 107
          runAsUser: 104
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: maya-grafana-cfgmap
          name: config-volume
        - name: maya-grafana-store
          persistentVolumeClaim:
            claimName: grafana-claim
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2019-09-10T10:45:49Z"
      lastUpdateTime: "2019-09-10T10:45:49Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2019-09-10T10:45:45Z"
    generation: 1
    labels:
      app: maya-io
    name: maya-io
    namespace: maya
    resourceVersion: "33643"
    selfLink: /apis/extensions/v1beta1/namespaces/maya/deployments/maya-io
    uid: 1a218743-4b26-471e-860a-294f573c2bb2
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      matchLabels:
        app: maya-io
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: maya-io
      spec:
        containers:
        - args:
          - --db-host
          - mysql.maya.svc.cluster.local
          - --db-user
          - maya
          - --db-pass
          - maya
          - --db-name
          - maya
          image: registry.mayadata.io/maya-io-server:1.1.0-ee
          imagePullPolicy: Always
          name: maya-io
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /mayastore
            name: maya-store
          - mountPath: /var/lib/maya/etc/maya.properties
            name: maya-config
            subPath: maya.properties
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: directoronprem-registry-secret
        initContainers:
        - command:
          - sh
          - -c
          - |
            set -ex
            export MAYA=$(kubectl get ClusterRoleBinding | grep -w crb-maya-io | awk '{print $1}')
            echo $MAYA
            until [ ! -z "$MAYA" ]
            do
               echo "wating for ClusterRoleBinding"
               sleep 1;
               export MAYA=$(kubectl get ClusterRoleBinding | grep -w crb-maya-io | awk '{print $1}')
               echo $MAYA
            done
          image: registry.mayadata.io/maya-init:1.0.0
          imagePullPolicy: IfNotPresent
          name: mios-wait-for-crb
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - sh
          - -c
          - |
            set -ex
            export COUNT=0
            echo $COUNT
            until [ $COUNT -ne 0 ]
            do
               echo "wating for mysql"
               sleep 2;
               export COUNT=$(kubectl get pods -l app=mysql -n maya -o json  | jq -r '.items[] | select(.status.phase == "Running" and ([ .status.conditions[] | select(.type == "Ready" and .status == "True") ] | length ) >= 1 ) | .metadata.name' | grep -w mysql | wc -l)
               echo $COUNT
            done
          image: registry.mayadata.io/maya-init:1.0.0
          imagePullPolicy: IfNotPresent
          name: mios-wait-for-mysql
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - sh
          - -c
          - |
            set -ex
            export COUNT=0
            echo $COUNT
            until [ $COUNT -ne 0 ]
            do
               echo "wating for chat-server"
               sleep 2;
               export COUNT=$(kubectl get pods -l app=chat-server -n maya -o json  | jq -r '.items[] | select(.status.phase == "Running" and ([ .status.conditions[] | select(.type == "Ready" and .status == "True") ] | length ) >= 1 ) | .metadata.name' | grep -w chat-server | wc -l)
               echo $COUNT
            done
          image: registry.mayadata.io/maya-init:1.0.0
          imagePullPolicy: IfNotPresent
          name: mios-wait-for-chat-server
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - sh
          - -c
          - |
            set -ex
            export COUNT=0
            echo $COUNT
            until [ $COUNT -ne 0 ]
            do
               echo "wating for maya-grafana"
               sleep 2;
               export COUNT=$(kubectl get pods -l app=maya-grafana -n maya -o json  | jq -r '.items[] | select(.status.phase == "Running" and ([ .status.conditions[] | select(.type == "Ready" and .status == "True") ] | length ) >= 1 ) | .metadata.name' | grep -w maya-grafana | wc -l)
               echo $COUNT
            done
          image: registry.mayadata.io/maya-init:1.0.0
          imagePullPolicy: IfNotPresent
          name: mios-wait-for-maya-grafana-service
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - sh
          - -c
          - |
            set -ex
            export COUNT=0
            echo $COUNT
            until [ $COUNT -ne 0 ]
            do
               echo "wating for maya-ui"
               sleep 2;
               export COUNT=$(kubectl get pods -l app=maya-ui -n maya -o json  | jq -r '.items[] | select(.status.phase == "Running" and ([ .status.conditions[] | select(.type == "Ready" and .status == "True") ] | length ) >= 1 ) | .metadata.name' | grep -w maya-ui | wc -l)
               echo $COUNT
            done
          image: registry.mayadata.io/maya-init:1.0.0
          imagePullPolicy: IfNotPresent
          name: mios-wait-for-maya-ui
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - sh
          - -c
          - |
            set -ex
            export COUNT=0
            echo $COUNT
            until [ $COUNT -ne 0 ]
            do
               echo "wating for elasticsearch-logging"
               sleep 2;
               export COUNT=$(kubectl get pods -l k8s-app=elasticsearch-logging -n maya -o json  | jq -r '.items[] | select(.status.phase == "Running" and ([ .status.conditions[] | select(.type == "Ready" and .status == "True") ] | length ) >= 1 ) | .metadata.name' | grep -w elasticsearch-logging | wc -l)
               echo $COUNT
            done
          image: registry.mayadata.io/maya-init:1.0.0
          imagePullPolicy: IfNotPresent
          name: mios-wait-for-elasticsearch-logging
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - sh
          - -c
          - |
            set -ex
            export COUNT=0
            echo $COUNT
            until [ $COUNT -ne 0 ]
            do
               echo "wating for kibana-logging"
               sleep 2;
               export COUNT=$(kubectl get pods -l k8s-app=kibana-logging -n maya -o json  | jq -r '.items[] | select(.status.phase == "Running" and ([ .status.conditions[] | select(.type == "Ready" and .status == "True") ] | length ) >= 1 ) | .metadata.name' | grep -w kibana-logging | wc -l)
               echo $COUNT
            done
          image: registry.mayadata.io/maya-init:1.0.0
          imagePullPolicy: IfNotPresent
          name: mios-wait-for-kibana-logging
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - sh
          - -c
          - |
            set -ex
            export COUNT=0
            echo $COUNT
            until [ $COUNT -ne 0 ]
            do
               echo "wating for alertstore-tablamanager"
               sleep 2;
               export COUNT=$(kubectl get pods -l name=alertstore-tablemanager -n maya -o json  | jq -r '.items[] | select(.status.phase == "Running" and ([ .status.conditions[] | select(.type == "Ready" and .status == "True") ] | length ) >= 1 ) | .metadata.name' | grep -w alertstore-tablemanager | wc -l)
               echo $COUNT
            done
          image: registry.mayadata.io/maya-init:1.0.0
          imagePullPolicy: IfNotPresent
          name: mios-wait-for-alertstore-tablemanager
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: sa-maya-io
        serviceAccountName: sa-maya-io
        terminationGracePeriodSeconds: 30
        volumes:
        - name: maya-store
          persistentVolumeClaim:
            claimName: mayastore
        - configMap:
            defaultMode: 420
            name: maya-config
          name: maya-config
  status:
    conditions:
    - lastTransitionTime: "2019-09-10T10:45:49Z"
      lastUpdateTime: "2019-09-10T10:45:49Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    - lastTransitionTime: "2019-09-10T10:55:54Z"
      lastUpdateTime: "2019-09-10T10:55:54Z"
      message: ReplicaSet "maya-io-6fc7c84b6d" has timed out progressing.
      reason: ProgressDeadlineExceeded
      status: "False"
      type: Progressing
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2019-09-10T10:45:46Z"
    generation: 1
    labels:
      app: maya-ui
    name: maya-ui
    namespace: maya
    resourceVersion: "33483"
    selfLink: /apis/extensions/v1beta1/namespaces/maya/deployments/maya-ui
    uid: a2b8684b-4473-4af1-928f-f648b8dca698
  spec:
    progressDeadlineSeconds: 2147483647
    replicas: 1
    revisionHistoryLimit: 2147483647
    selector:
      matchLabels:
        app: maya-ui
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: maya-ui
      spec:
        containers:
        - env:
          - name: VENDOR
            value: mod
          image: registry.mayadata.io/maya-ui:1.1.0-ee
          imagePullPolicy: Always
          name: maya-ui
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/mo-vendor
            name: config-data
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: directoronprem-registry-secret
        initContainers:
        - command:
          - sh
          - -c
          - ./entrypoint.sh
          env:
          - name: VENDOR
            value: mod
          image: registry.mayadata.io/vendor:1.1.0-ee
          imagePullPolicy: Always
          name: config-data
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/mo-vendor
            mountPropagation: Bidirectional
            name: config-data
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /tmp/mo-vendor
            type: ""
          name: config-data
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2019-09-10T10:45:52Z"
      lastUpdateTime: "2019-09-10T10:45:52Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
