apiVersion: v1
items:
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: "2019-09-10T10:45:52Z"
    generation: 1
    labels:
      app: cassandra
    name: cassandra
    namespace: maya
    resourceVersion: "32154"
    selfLink: /apis/apps/v1/namespaces/maya/statefulsets/cassandra
    uid: 49a2b797-a87d-4d90-9873-7c9df3de0b7f
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: cassandra
    serviceName: cassandra
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cassandra
      spec:
        containers:
        - env:
          - name: MAX_HEAP_SIZE
            value: 32M
          - name: HEAP_NEWSIZE
            value: 10M
          - name: CASSANDRA_SEEDS
            value: cassandra-0.cassandra.maya.svc.cluster.local
          - name: CASSANDRA_CLUSTER_NAME
            value: K8Demo
          - name: CASSANDRA_DC
            value: DC1-K8Demo
          - name: CASSANDRA_RACK
            value: Rack1-K8Demo
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          image: gcr.io/google-samples/cassandra:v13
          imagePullPolicy: Always
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - nodetool drain
          name: cassandra
          ports:
          - containerPort: 7000
            name: intra-node
            protocol: TCP
          - containerPort: 7001
            name: tls-intra-node
            protocol: TCP
          - containerPort: 7199
            name: jmx
            protocol: TCP
          - containerPort: 9042
            name: cql
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - /ready-probe.sh
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 50m
              memory: 100Mi
            requests:
              cpu: 50m
              memory: 100Mi
          securityContext:
            capabilities:
              add:
              - IPC_LOCK
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /cassandra_data
            name: cassandra-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 1800
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: cassandra-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
        storageClassName: openebs-hostpath
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: cassandra-7dfcb7b6b
    observedGeneration: 1
    replicas: 1
    updateRevision: cassandra-7dfcb7b6b
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: "2019-09-10T10:45:53Z"
    generation: 1
    labels:
      k8s-app: elasticsearch-logging
    name: elasticsearch-logging
    namespace: maya
    resourceVersion: "35150"
    selfLink: /apis/apps/v1/namespaces/maya/statefulsets/elasticsearch-logging
    uid: 63f2c674-3f2c-4246-b7e5-6ccbea8e3715
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: elasticsearch-logging
    serviceName: elasticsearch-logging
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: elasticsearch-logging
      spec:
        containers:
        - env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: NODE_MASTER
            value: "false"
          - name: ES_JAVA_OPTS
            value: -Xms32m -Xmx32m
          image: registry.mayadata.io/elasticsearch-search-guard:1.1.0-ee
          imagePullPolicy: IfNotPresent
          name: elasticsearch-logging
          ports:
          - containerPort: 9200
            name: db
            protocol: TCP
          - containerPort: 9300
            name: transport
            protocol: TCP
          resources:
            limits:
              cpu: 100m
            requests:
              cpu: 10m
          securityContext:
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/share/elasticsearch/data
            name: elasticsearch-logging
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: directoronprem-registry-secret
        initContainers:
        - command:
          - /sbin/sysctl
          - -w
          - vm.max_map_count=2621
          image: alpine:3.6
          imagePullPolicy: IfNotPresent
          name: elasticsearch-logging-init
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - command:
          - sh
          - -c
          - chown -R 1000:1000 /usr/share/elasticsearch/data
          image: busybox
          imagePullPolicy: IfNotPresent
          name: volume-mount-hack
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/share/elasticsearch/data
            name: elasticsearch-logging
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
        serviceAccount: elasticsearch-logging
        serviceAccountName: elasticsearch-logging
        terminationGracePeriodSeconds: 30
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: elasticsearch-logging
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
        storageClassName: openebs-hostpath
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: elasticsearch-logging-54676655c6
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: elasticsearch-logging-54676655c6
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: "2019-09-10T10:45:54Z"
    generation: 1
    name: mysql
    namespace: maya
    resourceVersion: "32211"
    selfLink: /apis/apps/v1/namespaces/maya/statefulsets/mysql
    uid: 08c87df8-5f6b-49b6-9e64-dc19483c6521
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: mysql
    serviceName: mysql
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: mysql
      spec:
        containers:
        - env:
          - name: MYSQL_ALLOW_EMPTY_PASSWORD
            value: "1"
          - name: MYSQL_DATABASE
            value: maya
          - name: MYSQL_USER
            value: maya
          - name: MYSQL_PASSWORD
            value: maya
          image: mysql:5.7
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - mysqladmin
              - ping
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: mysql
          ports:
          - containerPort: 3306
            name: mysql
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - mysql
              - -h
              - 127.0.0.1
              - -e
              - SELECT 1
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 50m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/mysql
            name: data
            subPath: mysql
          - mountPath: /etc/mysql/conf.d
            name: conf
        - command:
          - bash
          - -c
          - |
            set -ex
            cd /var/lib/mysql

            # Determine binlog position of cloned data, if any.
            if [[ -f xtrabackup_slave_info ]]; then
              # XtraBackup already generated a partial "CHANGE MASTER TO" query
              # because we're cloning from an existing slave.
              mv xtrabackup_slave_info change_master_to.sql.in
              # Ignore xtrabackup_binlog_info in this case (it's useless).
              rm -f xtrabackup_binlog_info
            elif [[ -f xtrabackup_binlog_info ]]; then
              # We're cloning directly from master. Parse binlog position.
              [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
              rm xtrabackup_binlog_info
              echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                    MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
            fi

            # Check if we need to complete a clone by starting replication.
            if [[ -f change_master_to.sql.in ]]; then
              echo "Waiting for mysqld to be ready (accepting connections)"
              until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done

              echo "Initializing replication from clone position"
              # In case of container restart, attempt this at-most-once.
              mv change_master_to.sql.in change_master_to.sql.orig
              mysql -h 127.0.0.1 <<EOF
            $(<change_master_to.sql.orig),
              MASTER_HOST='mysql-0.mysql',
              MASTER_USER='root',
              MASTER_PASSWORD='',
              MASTER_CONNECT_RETRY=10;
            START SLAVE;
            EOF
            fi

            # Start a server to send backups when requested by peers.
            exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
              "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"
          image: gcr.io/google-samples/xtrabackup:1.0
          imagePullPolicy: IfNotPresent
          name: xtrabackup
          ports:
          - containerPort: 3307
            name: xtrabackup
            protocol: TCP
          resources:
            requests:
              cpu: 10m
              memory: 10Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/mysql
            name: data
            subPath: mysql
          - mountPath: /etc/mysql/conf.d
            name: conf
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: directoronprem-registry-secret
        initContainers:
        - command:
          - bash
          - -c
          - |
            set -ex
            # Generate mysql server-id from pod ordinal index.
            [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
            ordinal=${BASH_REMATCH[1]}
            echo [mysqld] > /mnt/conf.d/server-id.cnf
            # Add an offset to avoid reserved server-id=0 value.
            echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
            # Copy appropriate conf.d files from config-map to emptyDir.
            if [[ $ordinal -eq 0 ]]; then
              cp /mnt/config-map/master.cnf /mnt/conf.d/
            else
              cp /mnt/config-map/slave.cnf /mnt/conf.d/
            fi
          image: mysql:5.7
          imagePullPolicy: IfNotPresent
          name: init-mysql
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /mnt/conf.d
            name: conf
          - mountPath: /mnt/config-map
            name: config-map
        - command:
          - bash
          - -c
          - |
            set -ex
            # Skip the clone if data already exists.
            [[ -d /var/lib/mysql/mysql ]] && exit 0
            # Skip the clone on master (ordinal index 0).
            [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
            ordinal=${BASH_REMATCH[1]}
            [[ $ordinal -eq 0 ]] && exit 0
            # Clone data from previous peer.
            ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
            # Prepare the backup.
            xtrabackup --prepare --target-dir=/var/lib/mysql
          image: gcr.io/google-samples/xtrabackup:1.0
          imagePullPolicy: IfNotPresent
          name: clone-mysql
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/mysql
            name: data
            subPath: mysql
          - mountPath: /etc/mysql/conf.d
            name: conf
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: conf
        - configMap:
            defaultMode: 420
            name: mysql
          name: config-map
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
    volumeClaimTemplates:
    - metadata:
        creationTimestamp: null
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
        storageClassName: openebs-hostpath
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: mysql-5b496989c8
    observedGeneration: 1
    replicas: 1
    updateRevision: mysql-5b496989c8
    updatedReplicas: 1
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
